import { CreateStreamOptions, ManagerCallbacks, PayloadType, StreamingManagerOptions } from '../types/index';
export declare function createStreamingManager<T extends CreateStreamOptions>(agent: T, { debug, callbacks, auth, baseURL }: StreamingManagerOptions): Promise<{
    /**
     * Method to send request to server to get clip or talk depend on you payload
     * @param payload
     */
    speak(payload: PayloadType<T>): Promise<import('../types/index').SendStreamPayloadResponse>;
    /**
     * Method to close RTC connection
     */
    terminate(): Promise<void>;
    /**
     * Session identifier information, should be returned in the body of all streaming requests
     */
    sessionId: string;
    /**
     * Id of current RTC stream
     */
    streamId: string;
    /**
     * Method to add callback that will be trigered on supported events
     * @param eventName
     * @param callback
     */
    onCallback<T_1 extends keyof ManagerCallbacks>(eventName: T_1, callback: ManagerCallbacks[T_1]): void;
}>;
export type StreamingManager<T extends CreateStreamOptions> = Awaited<ReturnType<typeof createStreamingManager<T>>>;
